# -*- coding: utf-8 -*-
"""Copy of ex1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i10fI_2bSpW8I13iButwPZAFD_RlUhYw
"""



from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns



df = pd.read_csv('/content/daily-website-visitors.csv')

"""# New Section"""

df.head(10)

df.tail(10)

df.shape

df.describe(include='all').T

df.info()

data_null = df.notnull().sum

df['Page.Loads'] = df['Page.Loads'].str.replace(',', '').astype(int)



daywise_data = df.groupby('Day')['Page.Loads'].sum()


daywise_data.plot(kind='bar', figsize=(8, 5), color='purple')
plt.title('Page Loads by Day of the Week')
plt.xlabel('Day of the Week')
plt.ylabel('Page Loads')
plt.xticks(rotation=45)

plt.show()

data = df.drop_duplicates()


print(f"Dataset now has {data.shape[0]} rows and {data.shape[1]} columns.")

df.plot(figsize=(14,7))

df = df.dropna()

df.shape

plt.figure(figsize=(14, 7))
plt.plot(df['Date'], df['Page.Loads'], color='blue')
plt.title('Page Loads Over Time')
plt.xlabel('Date')
plt.ylabel('Page Loads')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(8, 5))
sns.histplot(df['Page.Loads'], bins=30, kde=True, color='green')
plt.title('Distribution of Page Loads')
plt.xlabel('Page Loads')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(8, 5))
sns.boxplot(x=df['Page.Loads'], color='orange')
plt.title('Box Plot of Page Loads')
plt.xlabel('Page Loads')
plt.show()



plt.figure(figsize=(8, 5))
plt.scatter(df['Unique.Visits'], df['Page.Loads'], color='red')
plt.title('Scatter Plot of Unique Visits vs Page Loads')
plt.xlabel('Unique Visits')
plt.ylabel('Page Loads')
plt.show()

rolling_mean = df['Page.Loads'].rolling(window=7).mean()
rolling_std = df['Page.Loads'].rolling(window=7).std()

plt.figure(figsize=(14, 7))
plt.plot(df['Page.Loads'], color='blue', label='Original')
plt.plot(rolling_mean, color='red', label='Rolling Mean')
plt.plot(rolling_std, color='black', label='Rolling Std')
plt.title('Page Loads with Rolling Mean & Standard Deviation')
plt.xlabel('Date')
plt.ylabel('Page Loads')
plt.legend()
plt.show()

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
import matplotlib.pyplot as plt

# 1. Prepare Data
# Load your time series data (example: sales data with a timestamp column)
# Assuming your data has 'timestamp' and 'target' columns

# Example: creating a sample dataset (you can replace this with actual data)
date_rng = pd.date_range(start='1/1/2020', end='12/31/2020', freq='D')
data = pd.DataFrame(date_rng, columns=['timestamp'])
data['target'] = np.random.rand(len(data)) * 100  # Random target data (replace with actual data)

# 2. Feature Engineering
# We can use the date itself (e.g., day of the year) as a feature.
data['day_of_year'] = data['timestamp'].dt.dayofyear

# 3. Train-Test Split (chronological split, NOT random)
train = data[:int(0.8 * len(data))]  # 80% training data
test = data[int(0.8 * len(data)):]  # 20% testing data

# 4. Define Features (X) and Target (y)
X_train = train[['day_of_year']]  # Feature (independent variable)
y_train = train['target']  # Target (dependent variable)

X_test = test[['day_of_year']]
y_test = test['target']

# 5. Train Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# 6. Make Predictions
y_pred = model.predict(X_test)

# 7. Evaluate the Model
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

print(f'Mean Absolute Error (MAE): {mae}')
print(f'Root Mean Squared Error (RMSE): {rmse}')

# Plot the actual vs predicted values
plt.figure(figsize=(10, 6))
plt.plot(test['timestamp'], y_test, label='Actual')
plt.plot(test['timestamp'], y_pred, label='Predicted', linestyle='--')
plt.legend()
plt.title('Time Series Forecasting with Linear Regression')
plt.xlabel('Date')
plt.ylabel('Target')
plt.show()